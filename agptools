#!/usr/bin/env python3
"""
Various tools for modifying and using agp files
"""

import argparse
from functools import partial
import sys

from Bio import SeqIO
from Bio.Seq import Seq
from Bio.SeqRecord import SeqRecord
from Bio.Alphabet import generic_dna

import agp
import assemble

def parse_args():
    parser = argparse.ArgumentParser(description=__doc__)
    subparsers = parser.add_subparsers(required=True, dest='command',
                                       help='command to run')

    # --- 'split' command options ---
    split_parser = subparsers.add_parser(
            'split', help='split scaffolds into subscaffolds')

    # --- 'join' command options ---
    join_parser = subparsers.add_parser(
            'join', help='join multiple scaffolds into a superscaffold')

    # --- 'flip' command options ---
    flip_parser = subparsers.add_parser(
            'flip', help='reverse complement scaffolds or parts thereof')

    # --- 'assemble' command options ---
    assemble_parser = subparsers.add_parser(
            'assemble', description='output scaffolds in fasta '
            'format based on agp and contigs fasta')
    assemble_parser.add_argument(
            '-o', '--outfile', type=argparse.FileType('w'),
            help='where to write fasta of scaffolds [STDOUT]',
            default=sys.stdout)
    assemble_parser.add_argument(
            'contigs_fasta', type=partial(SeqIO.parse, format='fasta'),
            help='Assembly to flip scaffolds in')
    assemble_parser.add_argument(
            'agp', type=agp.open, default=agp.read(sys.stdin),
            help='AGP file assembling contigs into scaffolds [STDIN]')
    assemble_parser.set_defaults(
        func=lambda a: assemble.run(a.contigs_fasta, a.outfile, a.agp))

    # --- 'transform' command options ---
    transform_parser = subparsers.add_parser(
            'transform', help='transform coordinates in bed file from contig-'
            'based to scaffold-based')

    return parser.parse_args()


if __name__ == '__main__':
    args = parse_args()
    args.func(args)

